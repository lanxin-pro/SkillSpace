package cn.iocoder.educate.module.system.service.errorcode;

import cn.hutool.core.collection.CollUtil;
import cn.hutool.core.util.ObjectUtil;
import cn.iocoder.educate.framework.common.exception.util.ServiceExceptionUtil;
import cn.iocoder.educate.framework.common.pojo.PageResult;
import cn.iocoder.educate.module.system.api.errorcode.dto.ErrorCodeAutoGenerateReqDTO;
import cn.iocoder.educate.module.system.controller.admin.errorcode.vo.ErrorCodeCreateReqVO;
import cn.iocoder.educate.module.system.controller.admin.errorcode.vo.ErrorCodePageReqVO;
import cn.iocoder.educate.module.system.controller.admin.errorcode.vo.ErrorCodeUpdateReqVO;
import cn.iocoder.educate.module.system.convert.errorcode.ErrorCodeConvert;
import cn.iocoder.educate.module.system.dal.dataobject.errorcode.ErrorCodeDO;
import cn.iocoder.educate.module.system.dal.mysql.errorcode.ErrorCodeMapper;
import cn.iocoder.educate.module.system.enums.ErrorCodeConstants;
import cn.iocoder.educate.module.system.enums.errorcode.ErrorCodeTypeEnum;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;
import org.springframework.validation.annotation.Validated;

import javax.annotation.Resource;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.function.Function;
import java.util.stream.Collectors;

/**
 * 错误码 Service 实现类
 *
 * @Author: j-sentinel
 * @Date: 2023/8/20 10:40
 */
@Service
@Validated
@Slf4j
public class ErrorCodeServiceImpl implements ErrorCodeService {

    @Resource
    private ErrorCodeMapper errorCodeMapper;

    @Override
    public Long createErrorCode(ErrorCodeCreateReqVO createReqVO) {
        // 校验 code 重复
        validateCodeDuplicate(createReqVO.getCode(), null);

        // 插入
        ErrorCodeDO errorCode = ErrorCodeConvert.INSTANCE.convert(createReqVO)
                .setType(ErrorCodeTypeEnum.MANUAL_OPERATION.getType());
        errorCodeMapper.insert(errorCode);
        // 返回
        return errorCode.getId();
    }

    @Override
    public void updateErrorCode(ErrorCodeUpdateReqVO errorCodeUpdateReqVO) {
        // 校验存在
        validateErrorCodeExists(errorCodeUpdateReqVO.getId());
        // 校验 code 重复
        validateCodeDuplicate(errorCodeUpdateReqVO.getCode(), errorCodeUpdateReqVO.getId());

        // 更新
        ErrorCodeDO errorCodeDO = ErrorCodeConvert.INSTANCE.convert(errorCodeUpdateReqVO)
                .setType(ErrorCodeTypeEnum.MANUAL_OPERATION.getType());
        errorCodeMapper.updateById(errorCodeDO);
    }

    @Override
    public void deleteErrorCode(Long id) {
        // 校验存在
        validateErrorCodeExists(id);
        // 删除
        errorCodeMapper.deleteById(id);
    }

    @Override
    public ErrorCodeDO getErrorCode(Long id) {
        return errorCodeMapper.selectById(id);
    }

    @Override
    public PageResult<ErrorCodeDO> getErrorCodePage(ErrorCodePageReqVO errorCodePageReqVO) {
        return errorCodeMapper.selectPage(errorCodePageReqVO);
    }

    /**
     * 程序在启动的时候会执行这个！ ApplicationReadyEvent
     * @param autoGenerateDTOs 错误码信息
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public void autoGenerateErrorCodes(List<ErrorCodeAutoGenerateReqDTO> autoGenerateDTOs) {
        if (CollUtil.isEmpty(autoGenerateDTOs)) {
            return;
        }
        // 获得错误码
        Set<Integer> collect = autoGenerateDTOs.stream()
                .map(ErrorCodeAutoGenerateReqDTO::getCode)
                .filter(ObjectUtil::isNotEmpty)
                .collect(Collectors.toSet());
        // 根据code来查询 数据库中的错误码
        List<ErrorCodeDO> errorCodeDOS = errorCodeMapper.selectListByCodes(collect);
        // 得到code ErrorCodeDO 后面我不可能每次都get数据库，数据库不存在然后set
        Map<Integer, ErrorCodeDO> errorCodeDOMap = errorCodeDOS.stream()
                .collect(Collectors.toMap(ErrorCodeDO::getCode, Function.identity(), (v1, v2) -> v1));
        // 遍历 autoGenerateDTOs 数组，逐个插入或更新。考虑到每次量级不大，就不走批量了
        autoGenerateDTOs.forEach(autoGenerateDTO -> {
            // 数据库中是否能查询到
            ErrorCodeDO errorCodeDO = errorCodeDOMap.get(autoGenerateDTO.getCode());
            // 数据库中不存在，则进行新增
            if(errorCodeDO == null){
                errorCodeDO = ErrorCodeConvert.INSTANCE.convert(autoGenerateDTO);
                errorCodeDO.setType(ErrorCodeTypeEnum.AUTO_GENERATION.getType());
                errorCodeMapper.insert(errorCodeDO);
                return;
            }
            // 数据库中存在，则进行更新。更新有三个前置条件：
            // 条件 1. 只更新自动生成的错误码，即 Type 为 ErrorCodeTypeEnum.AUTO_GENERATION
            if(!ErrorCodeTypeEnum.AUTO_GENERATION.getType().equals(errorCodeDO.getType())){
                return;
            }
            // 条件 2. 分组 applicationName 必须匹配，避免存在错误码冲突的情况，有可能是其他系统的错误码
            if (!autoGenerateDTO.getApplicationName().equals(errorCodeDO.getApplicationName())) {
                log.error("[autoGenerateErrorCodes][自动创建({}/{}) 错误码失败，数据库中已经存在({}/{})]",
                        autoGenerateDTO.getCode(), autoGenerateDTO.getApplicationName(),
                        errorCodeDO.getCode(), errorCodeDO.getApplicationName());
                return;
            }
            // 条件 3. 错误提示语存在差异，如果错误语都一样，那么就没有跟新的必要
            if (autoGenerateDTO.getMessage().equals(errorCodeDO.getMessage())) {
                return;
            }
            // 最终匹配，进行更新
            errorCodeMapper.updateById(
                    new ErrorCodeDO()
                            .setId(errorCodeDO.getId())
                            .setMessage(autoGenerateDTO.getMessage())
            );
        });

    }

    /**
     * 校验错误码的唯一字段是否重复
     *
     * 是否存在相同编码的错误码
     *
     * @param code 错误码编码
     * @param id 错误码编号
     */
    public void validateCodeDuplicate(Integer code, Long id) {
        ErrorCodeDO errorCodeDO = errorCodeMapper.selectByCode(code);
        if (errorCodeDO == null) {
            return;
        }
        // 如果 id 为空，说明不用比较是否为相同 id 的错误码
        if (id == null) {
            throw ServiceExceptionUtil.exception(ErrorCodeConstants.ERROR_CODE_DUPLICATE);
        }
        if (!errorCodeDO.getId().equals(id)) {
            throw ServiceExceptionUtil.exception(ErrorCodeConstants.ERROR_CODE_DUPLICATE);
        }
    }

    public void validateErrorCodeExists(Long id) {
        if (errorCodeMapper.selectById(id) == null) {
            throw ServiceExceptionUtil.exception(ErrorCodeConstants.ERROR_CODE_NOT_EXISTS);
        }
    }

}
