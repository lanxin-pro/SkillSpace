spring:
  # 允许循环依赖，因为项目是三层架构，无法避免这个情况。
  main:
    allow-circular-references: true
  servlet:
    multipart:
      # 设置单个文件大小
      max-file-size: 200MB
      # 设置单次请求文件的总大小
      max-request-size: 200MB


server:
  tomcat.uri-encoding: UTF-8
  servlet:
    context-path: /server

--- #################### 监控相关配置 ####################

# Actuator 监控端点的配置项
management:
  endpoints:
    web:
      # Actuator 提供的 API 接口的根目录。默认为 /actuator
      base-path: /actuator
      exposure:
        # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。
        include: '*'

# Spring Boot Admin 配置项
spring:
  boot:
    admin:
      # Spring Boot Admin Client 客户端的相关配置
      client:
        # 设置 Spring Boot Admin Server 地址
        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path}
        instance:
          # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]
          service-host-type: IP
      # Spring Boot Admin Server 服务端的相关配置
      # 配置 Spring
      context-path: /admin



--- #################### 数据库相关配置 ####################
spring:
  # 数据源配置项
  autoconfigure:
    exclude:
      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源
  datasource:
    druid: # Druid 【监控】相关的全局配置
      web-stat-filter:
        enabled: true
      stat-view-servlet:
        enabled: true
        allow: # 设置白名单，不填则允许所有访问
        url-pattern: /druid/*
        login-username: # 控制台管理用户名和密码
        login-password:
      filter:
        stat:
          enabled: true
          log-slow-sql: true # 慢 SQL 记录
          slow-sql-millis: 100
          merge-sql: true
        wall:
          config:
            multi-statement-allow: true
    dynamic:
      druid: # Druid 【连接池】相关的全局配置
        initial-size: 5 # 初始连接数
        min-idle: 10 # 最小连接池数量
        max-active: 20 # 最大连接池数量
        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒
        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒
        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒
        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒
        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效
        test-while-idle: true
        test-on-borrow: false
        test-on-return: false
      primary: master
      datasource:
        master:
          name: educate-vue-pro
          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例
          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例
          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例
          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例
          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.master.name} # SQLServer 连接的示例
          username: root
          password: dp899556677
        slave:
          name: educate-vue-pro
          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例
          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例
          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例
          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例
          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.slave.name} # SQLServer 连接的示例
          username: root
          password: dp899556677

  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优
  redis:
    # 连接超时时间（毫秒）
    timeout: 18000
    # 地址
    host: 47.99.97.14
    # 端口
    port: 6379
    password: dp899556677
    # 数据库索引
    database: 0
    connectionMinimumIdleSize: 2
    lettuce:
      pool:
        max-active: -1
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1
        # 连接池中的最大空闲连接
        max-idle: 10
        # 连接池中的最小空闲连接
        min-idle: 0

  # Quartz 配置项，对应 QuartzProperties 配置类
  quartz:
    # 本地开发环境，尽量不要开启 Job
    auto-startup: true
    # Scheduler 名字。默认为 schedulerName
    scheduler-name: schedulerName
    # Job 存储器类型。默认为 memory 表示内存，可选 jdbc 使用数据库。
    job-store-type: jdbc
    # 应用关闭时，是否等待定时任务执行完成。默认为 false ，建议设置为 true
    wait-for-jobs-to-complete-on-shutdown: true
    # 添加 Quartz Scheduler 附加属性，更多可以看 http://www.quartz-scheduler.org/documentation/2.4.0-SNAPSHOT/configuration.html 文档
    properties:
      org:
        quartz:
          # Scheduler 相关配置
          scheduler:
            instanceName: schedulerName
            # 自动生成 instance ID
            instanceId: AUTO
          # JobStore 相关配置
          jobStore:
            # JobStore 实现类。可见博客：https://blog.csdn.net/weixin_42458219/article/details/122247162
            class: org.springframework.scheduling.quartz.LocalDataSourceJobStore
            # 是集群模式
            isClustered: true
            # 集群检查频率，单位：毫秒。默认为 15000，即 15 秒
            clusterCheckinInterval: 15000
            # misfire 阀值，单位：毫秒。
            misfireThreshold: 60000
          # 线程池相关配置
          threadPool:
            # 线程池大小。默认为 10 。
            threadCount: 25
            # 线程优先级
            threadPriority: 5
            # 线程池类型
            class: org.quartz.simpl.SimpleThreadPool
    # 使用 JDBC 的 JobStore 的时候，JDBC 的配置
    jdbc:
      # 是否自动使用 SQL 初始化 Quartz 表结构。这里设置成 never ，我们手动创建表结构。
      initialize-schema: NEVER

# MyBatis Plus 的配置项
mybatis-plus:
  configuration:
    # 虽然默认为 true ，但是还是显示去指定下。
    map-underscore-to-camel-case: true
  global-config:
    db-config:
      # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。
      id-type: NONE
      #      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库
      #      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库
      #      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解
      # 逻辑已删除值(默认为 1)
      logic-delete-value: 1
      # 逻辑未删除值(默认为 0)
      logic-not-delete-value: 0


--- #################### 三方登录配置 ####################

justauth:
  enabled: true
  type:
    # 钉钉
    DINGTALK:
      client-id: dingoafh3d6mnz6vlbkmnh
      client-secret: IO0WsvPDAIMC0Rj0MPgbAEF2WK1vxRAp-K15cvKFJM0bqZ6q2n7fCIsnK2RDuH91
      ignore-check-redirect-uri: true
    # 谷歌
    GOOGLE:
      client-id: 208443676077-im0q77jc0bjk246eaftuhn2vg8ssb3om.apps.googleusercontent.com
      client-secret: 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
      http-config:
        timeout: 15000
        porxy:
          type: HTTP
          hostname: 127.0.0.1
          port: 5173
      ignore-check-redirect-uri: true
    # 企业微信
    WECHAT_ENTERPRISE:
      client-id: wwd411c69a39ad2e54
      client-secret: 1wTb7hYxnpT2TUbIeHGXGo7T0odav1ic10mLdyyATOw
      agent-id: 1000004
      ignore-check-redirect-uri: true
  cache:
    type: REDIS
    prefix: 'social_auth_state:' # 缓存前缀，目前只对 Redis 缓存生效，默认 JUSTAUTH::STATE::
    timeout: 24h # 超时时长，目前只对 Redis 缓存生效，默认 3 分钟


--- #################### 接口文档配置 ####################

springdoc:
  api-docs:
    enabled: true
    path: /v3/api-docs
  swagger-ui:
    enabled: true
    path: /swagger-ui

knife4j:
  enable: true
  setting:
    language: zh_cn

--- #################### 验证码相关配置 ####################

aj:
  captcha:
    # 滑动验证，底图路径，不配置将使用默认图片；以 classpath: 开头，取 resource 目录下路径
    jigsaw: classpath:images/jigsaw
    # # 滑动验证，底图路径，不配置将使用默认图片；以 classpath: 开头，取 resource 目录下路径
    pic-click: classpath:images/pic-click
    # 缓存 local/redis...
    cache-type: redis
    # local 缓存的阈值,达到这个值，清除缓存
    cache-number: 1000
    # local定时清除过期缓存(单位秒),设置为0代表不执行
    timing-clear: 180
    # 验证码类型 default两种都实例化。 blockPuzzle 滑块拼图 clickWord 文字点选
    type: blockPuzzle
    # 右下角水印文字(我的水印)，可使用 https://tool.chinaz.com/tools/unicode.aspx 中文转 Unicode，Linux 可能需要转 unicode
    water-mark: 纳西妲
    # 校验滑动拼图允许误差偏移量(默认5像素)
    slip-offset: 6
    # 滑动干扰项(0/1/2)
    interference-options: 1
    # 接口请求次数一分钟限制是否开启 true|false
    req-frequency-limit-enable: false
    # 验证失败 5 次，get接口锁定
    req-get-lock-limit: 5
    # 验证失败后，锁定时间间隔
    req-get-lock-seconds: 10
    # get 接口一分钟内请求数限制
    req-get-minute-limit: 30
    # check 接口一分钟内请求数限制
    req-check-minute-limit: 60
    # verify 接口一分钟内请求数限制
    req-verify-minute-limit: 60




--- #################### 蓝欣相关配置 ####################

lanxin:
  web:
    # 这个属性必须和server.servlet.context-path保持一致
    prePath: server
    admin-ui:
      # Admin 管理后台 UI 的地址
      url: http://dashboard.yudao.iocoder.cn
  info:
    version: 1.0.0
    base-package: cn.iocoder.educate
  # 安全配置
  security:
    # HTTP 请求时，访问令牌的请求 Header
    tokenHeader: Authorization
    # mock 模式的开关
    mockEnable: false
    # mock 模式的密钥 一定要配置密钥，保证安全性
    mockSecret: test
  # 短信验证码相关的配置项
  sms-code:
    # 过期时间
    expire-times: 10m
    # 最快1秒发送一次
    send-frequency: 1m
    # 每日最多发送短信记录数
    send-maximum-quantity-per-day: 10
    # 每小时发送的最大ip数量
    sendMaximumQuantityPerIp: 5
    # 这里配置 9999 的原因是，测试方便。
    begin-code: 10000
    # 这里配置 9999 的原因是，测试方便。
    end-code: 100000
  codegen:
    base-package: ${lanxin.info.base-package}
    db-schemas: ${spring.datasource.dynamic.datasource.master.name}
    # 前端模版的类型，参见 CodegenFrontTypeEnum 枚举类
    front-type: 20

# 日志
educate:
  # java监控
  metrics: true
  # API日志记录
  access-log:
    enable: true
  # 开启错误码加载日志
  error-code:
    enable: false
    constants-class-list:
      - cn.iocoder.educate.module.system.enums.ErrorCodeConstants
  # swagger相关配置
  swagger:
    author: 蓝欣
    title: 沐智课堂后台管理系统
    description: 提供管理后台、用户 App 的所有功能
    version: ${lanxin.info.version}
    url: ${lanxin.web.admin-ui.url}
    email: 2724650486@qq.com
    termsOfService: MIT
    license: https://github.com/lanxin-pro/SkillSpace/blob/dev/LICENSE
    license-url: https://github.com/lanxin-pro/SkillSpace/blob/dev/LICENSE

uploadFolder: D:\\auploadFile\\