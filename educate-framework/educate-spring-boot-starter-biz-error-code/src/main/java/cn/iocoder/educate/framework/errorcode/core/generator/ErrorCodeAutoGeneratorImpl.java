package cn.iocoder.educate.framework.errorcode.core.generator;

import cn.hutool.core.collection.CollUtil;
import cn.hutool.core.util.ClassUtil;
import cn.hutool.core.util.ReflectUtil;
import cn.iocoder.educate.framework.common.exception.ErrorCode;
import cn.iocoder.educate.module.system.api.errorcode.ErrorCodeApi;
import cn.iocoder.educate.module.system.api.errorcode.dto.ErrorCodeAutoGenerateReqDTO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.ApplicationRunner;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.event.EventListener;
import org.springframework.scheduling.annotation.Async;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * ErrorCodeAutoGenerator 的实现类
 * 目的是，扫描指定的 {@link #constantsClassList} 类，写入到 system 服务中
 *
 * @Author: j-sentinel
 * @Date: 2023/8/20 12:17
 */
@Slf4j
@RequiredArgsConstructor
public class ErrorCodeAutoGeneratorImpl implements ErrorCodeAutoGenerator {

    /**
     * 应用分组
     */
    private final String applicationName;

    /**
     * 错误码枚举类
     */
    private final List<String> constantsClassList;

    /**
     * 错误码 Api
     */
    private final ErrorCodeApi errorCodeApi;

    /**
     * @EventListener(ApplicationReadyEvent.class) 它用于在应用程序启动完成后执行相应的事件处理逻辑
     *
     * 具体来说，@EventListener 注解标记的方法将在 ApplicationReadyEvent 事件发生时被调用。
     * ApplicationReadyEvent 是Spring框架中的一个事件，表示应用程序已经准备好接受请求，并且所有的初始化工作都已完成。
     */
    @Override
    @EventListener(ApplicationReadyEvent.class)
    @Async // 异步，保证项目的启动过程，毕竟非关键流程
    public void execute() {
        // 第一步，解析错误码
        List<ErrorCodeAutoGenerateReqDTO> autoGenerateDTOs = parseErrorCode();
        log.info("[execute][解析到错误码数量为 ({}) 个]", autoGenerateDTOs.size());

        // 第二步，写入到 system 服务
        errorCodeApi.autoGenerateErrorCodeList(autoGenerateDTOs);
        log.info("[execute][写入到 system 组件完成]");
    }

    /**
     * 解析 constantsClassList 变量，转换成错误码数组
     *
     * @return 错误码数组
     */
    private List<ErrorCodeAutoGenerateReqDTO> parseErrorCode() {
        if (CollUtil.isEmpty(constantsClassList)) {
            log.info("[execute][未配置 educate.error-code.constants-class-list 配置项，不进行自动写入到 system 服务中]");
            return new ArrayList<>();
        }
        // 解析错误码
        List<ErrorCodeAutoGenerateReqDTO> autoGenerateDTOs = new ArrayList<>();
        constantsClassList.forEach(constantsClass -> {
            // 加载类并初始化
            Class<?> errorCodeConstantsClazz = ClassUtil.loadClass(constantsClass);
            // 解析错误码
            List<ErrorCodeAutoGenerateReqDTO> errorCodeAutoGenerateReqDTOS = parseErrorCode(errorCodeConstantsClazz);
            autoGenerateDTOs.addAll(errorCodeAutoGenerateReqDTOS);
        });
        return autoGenerateDTOs;
    }

    /**
     * 解析错误码【类】，获得错误码数组
     *
     * @return 错误码数组
     */
    private List<ErrorCodeAutoGenerateReqDTO> parseErrorCode(Class<?> constantsClass) {
        List<ErrorCodeAutoGenerateReqDTO> autoGenerateDTOs = new ArrayList<>();
        // 循环类字段
        Arrays.stream(constantsClass.getFields()).forEach(field -> {
            // 错误码超类对象
            if (field.getType() != ErrorCode.class) {
                return;
            }
            // hutool反射
            ErrorCode errorCode = (ErrorCode) ReflectUtil.getFieldValue(constantsClass, field);
            autoGenerateDTOs.add(
                    new ErrorCodeAutoGenerateReqDTO()
                            .setApplicationName(applicationName)
                            .setCode(errorCode.getCode())
                            .setMessage(errorCode.getMsg()));
        });
        return autoGenerateDTOs;
    }

}
